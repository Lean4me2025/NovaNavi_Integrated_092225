const state = { selectedTraits: new Set(), reflection: null };
function $(s){return document.querySelector(s)}; function $all(s){return [...document.querySelectorAll(s)]};
function showView(hash){ $all('.view').forEach(v=>v.classList.remove('active')); const el=$(hash||'#welcome'); if(el) el.classList.add('active'); window.location.hash=hash; }
function renderTraits(list){ const grid=$('#traits-grid'); grid.innerHTML=''; list.forEach(t=>{ const div=document.createElement('div'); div.className='trait'; div.textContent=t; div.onclick=()=>{ if(state.selectedTraits.has(t)){state.selectedTraits.delete(t); div.classList.remove('selected');} else {state.selectedTraits.add(t); div.classList.add('selected');} $('#see-results').disabled = state.selectedTraits.size===0; }; grid.appendChild(div); }); }
function renderResults(){ const wrap=$('#results-list'); wrap.innerHTML=''; [...state.selectedTraits].slice(0,12).forEach(t=>{ const tag=document.createElement('span'); tag.className='tag'; tag.textContent=t; wrap.appendChild(tag); }); }
function renderReflection(cards){ const wrap=$('#reflection-options'); wrap.innerHTML=''; cards.forEach(c=>{ const div=document.createElement('div'); div.className='card'; div.innerHTML=`<div style="font-weight:700;margin-bottom:6px">${c.title}</div><div style="opacity:.85">${c.desc}</div>`; div.onclick=()=>{ state.reflection=c.id; $all('#reflection .card').forEach(x=>x.classList.remove('selected')); div.classList.add('selected'); $('#save-reflection').disabled=false; }; wrap.appendChild(div); }); }
function renderPathSuggestions(){ const wrap=$('#path-suggestions'); wrap.innerHTML=''; const out=[]; if(state.reflection==='starting') out.push('Start with the Purpose Book and a light Starter plan.'); if(state.reflection==='pivoting') out.push('Use Pro tools to translate strengths into a new lane.'); if(state.reflection==='advancing') out.push('Mastery plan + targeted applications to level up.'); if(state.reflection==='restarting') out.push('Purpose Book + Pro templates to rebuild momentum.'); if(out.length===0) out.push('Choose the option that resonates most.'); out.forEach(s=>{ const d=document.createElement('div'); d.className='card'; d.textContent=s; wrap.appendChild(d); }); }
document.addEventListener('click', (e)=>{ const btn=e.target.closest('[data-goto]'); if(btn){ const t=btn.getAttribute('data-goto'); if(t==='#results') renderResults(); if(t==='#path') renderPathSuggestions(); showView(t); } });
$('#clear-traits')?.addEventListener('click', ()=>{ state.selectedTraits.clear(); $all('.trait').forEach(t=>t.classList.remove('selected')); $('#see-results').disabled=true; });
$('#save-reflection')?.addEventListener('click', ()=>{ if(!state.reflection) return; showView('#path'); });
async function boot(){ try{ const traits=await (await fetch('data/traits.json')).json(); renderTraits(traits); const cards=await (await fetch('data/reflection.json')).json(); renderReflection(cards); }catch(e){ console.error('Data load error', e); } }
boot(); window.addEventListener('hashchange', ()=>showView(location.hash||'#welcome'));